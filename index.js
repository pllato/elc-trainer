let lessonsData = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–æ–≤

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é addLesson –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –≤ lessonsData
function addLesson(lesson) {
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ usedNames –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
  lesson.usedNames = [];
  lessonsData.push(lesson);
  console.log(`Adding lesson: ${lesson.name} for level ${lesson.level}`);
}

const encouragementMessages = [
  "–¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü! üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —É—Ä–æ–∫–æ–º –Ω–∞ —É—Ä–∞! –¢—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å! üí™",
  "–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –±–ª–µ—Å—Ç—è—â–µ! üéâ –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω, —Ç—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ! –¢—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—à—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–∏! ‚ú®",
  "–£—Ö, –∫–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! üåü –¢—ã –ø—Ä–æ—à—ë–ª —É—Ä–æ–∫ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é! –¢—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å, —ç—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! üí™",
  "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω! üèÜ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω, —Ç—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü! –¢—ã —É–∂–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! üåü",
  "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! üéâ –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —É—Ä–æ–∫–æ–º –Ω–∞ –≤—Å–µ 100%! –¢—ã —É–∂–µ –æ–±—â–∞–µ—à—å—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å, —ç—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! üí™",
  "–í–∞—É, —Ç—ã —Å—É–ø–µ—Ä! üåü –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω, –∏ —Ç—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ",
  "–û—Ç–ª–∏—á–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–Ω–æ! üéâ –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —É—Ä–æ–∫, –∏ —Ç–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–≤—É—á–∏—Ç –∫–∞–∫ —É –Ω–æ—Å–∏—Ç–µ–ª—è! –¢—ã –∑–≤–µ–∑–¥–∞! ‚≠ê",
  "–ö–∞–∫ –∫—Ä—É—Ç–æ! üåü –¢—ã –ø—Ä–æ—à—ë–ª —É—Ä–æ–∫, –∏ —Ç–≤–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–æ—Å–∏—Ç–µ–ª—è! –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! üíñ",
  "–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —É—Ä–∞! üèÜ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω, –∏ —Ç—ã —É–∂–µ –æ–±—â–∞–µ—Ç–µ—Å—å –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å! –≠—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! üéà",
  "–°—É–ø–µ—Ä, —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ! üåü –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω, –∏ —Ç—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üí™"
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SpeechRecognition
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
if (!SpeechRecognition) {
  alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SpeechRecognition API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, Google Chrome.");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
const recognition = SpeechRecognition ? new SpeechRecognition() : null;
if (recognition) {
  recognition.lang = 'en-US';
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;
  recognition.continuous = true;
}

let userName = '';
let userLevel = '';
let userLesson = '';
let progress = {};
let spokenHistory = [];
let logEntries = [];
let isListening = false;
let lastSpeechTime = Date.now();
let startTime = null;
let endTime = null;
let lessonCompleted = false;
let currentLessonData = null;
let currentPart = 1;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub
const GITHUB_OWNER = 'pllato';
const GITHUB_REPO = 'elc-trainer';
const GITHUB_PATH = 'lessons';

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
const ADMIN_PASSWORD = 'admin123';

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const startScreen = document.getElementById('start-screen');
const practiceScreen = document.getElementById('practice-screen');
const adminScreen = document.getElementById('admin-screen');
const startBtn = document.getElementById('start-btn');
const adminBtn = document.getElementById('admin-btn');
const startPracticeBtn = document.getElementById('start-practice-btn');
const restartListeningBtn = document.getElementById('restart-listening-btn');
const feedback = document.getElementById('feedback');
const startFeedback = document.getElementById('start-feedback');
const adminFeedback = document.getElementById('admin-feedback');
const statsDiv = document.getElementById('stats');
const progressBars = document.getElementById('progress-bars');
const logDiv = document.getElementById('log');
const userNameEl = document.getElementById('user-name');
const userLevelEl = document.getElementById('user-level');
const userLessonEl = document.getElementById('user-lesson');
const completionModal = document.getElementById('completionModal');
const congratulationsEl = document.getElementById('congratulations');
const modalLog = document.getElementById('modal-log');
const levelSelect = document.getElementById('level');
const lessonSelect = document.getElementById('lesson');
const lessonFileInput = document.getElementById('lesson-file');
const uploadLessonBtn = document.getElementById('upload-lesson-btn');
const githubTokenInput = document.getElementById('github-token');
const indexHtmlFileInput = document.getElementById('index-html-file');
const uploadIndexHtmlBtn = document.getElementById('upload-index-html-btn');
const indexJsFileInput = document.getElementById('index-js-file');
const uploadIndexJsBtn = document.getElementById('upload-index-js-btn');
const deleteLessonSelect = document.getElementById('delete-lesson');
const deleteLessonBtn = document.getElementById('delete-lesson-btn');
const passwordModal = document.getElementById('password-modal');
const passwordInput = document.getElementById('password-input');
const passwordError = document.getElementById('password-error');
const totalProgressText = document.getElementById('total-progress-text');
const totalProgressBar = document.getElementById('total-progress-bar');
const introExamplesDiv = document.getElementById('intro-examples');

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "–ê–¥–º–∏–Ω–∫–∞"
adminBtn.addEventListener('click', (e) => {
  e.preventDefault();
  if (passwordModal) {
    passwordModal.style.display = 'block';
    passwordInput.value = '';
    passwordError.textContent = '';
    passwordInput.focus();
  } else {
    console.error('Password modal not found');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
function checkPassword() {
  const enteredPassword = passwordInput.value.trim();

  if (enteredPassword === '') {
    passwordError.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.';
    passwordInput.focus();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
  if (enteredPassword === ADMIN_PASSWORD) {
    // –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∫—É
    passwordModal.style.display = 'none';
    if (startScreen && adminScreen) {
      startScreen.classList.add('hidden');
      adminScreen.classList.remove('hidden');
      githubTokenInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞
    } else {
      console.error('startScreen or adminScreen not found');
    }
  } else {
    // –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    passwordError.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    passwordInput.value = '';
    passwordInput.focus();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
passwordInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter') {
    checkPassword();
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–æ–≤ —Å GitHub —á–µ—Ä–µ–∑ API
async function loadLessonsFromGitHub() {
  console.log('Starting to load lessons from GitHub API...');
  lessonsData.length = 0;
  deleteLessonSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</option>';
  const token = githubTokenInput.value.trim();
  const headers = {
    'Accept': 'application/vnd.github.v3+json'
  };
  
  if (token) {
    headers['Authorization'] = `token ${token}`;
    console.log('Using GitHub token for authorization');
  } else {
    console.log('No GitHub token provided, proceeding without authorization');
  }

  try {
    const apiUrl = `https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/contents/${GITHUB_PATH}`;
    console.log(`Fetching lessons from ${apiUrl}`);
    const response = await fetch(apiUrl, { headers });
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`GitHub API error: ${response.statusText} (${response.status}) - ${errorText}`);
    }
    const files = await response.json();
    console.log('Files fetched from GitHub:', files);

    for (const file of files) {
      if (file.name.endsWith('.js')) {
        console.log(`Processing file: ${file.name}`);
        const option = document.createElement('option');
        option.value = file.name;
        option.textContent = file.name;
        deleteLessonSelect.appendChild(option);

        const fileResponse = await fetch(file.download_url);
        if (!fileResponse.ok) {
          console.error(`Failed to fetch lesson ${file.name}: ${fileResponse.statusText}`);
          continue;
        }
        const script = await fileResponse.text();
        console.log(`Fetched script for ${file.name}:`, script);
        try {
          eval(script);
          console.log(`Successfully evaluated lesson ${file.name}`);
        } catch (error) {
          console.error(`Error evaluating lesson ${file.name}:`, error.message);
          console.error(`Stack trace:`, error.stack);
        }
      } else {
        console.log(`Skipping non-js file: ${file.name}`);
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞
    lessonsData.sort((a, b) => {
      const lessonNumberA = parseInt(a.lesson.replace('lesson', ''), 10);
      const lessonNumberB = parseInt(b.lesson.replace('lesson', ''), 10);
      return lessonNumberA - lessonNumberB;
    });

    console.log('Lessons loaded from GitHub:', lessonsData);
    populateLessons();
  } catch (error) {
    console.error('Error loading lessons from GitHub:', error);
    if (startFeedback) {
      startFeedback.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–æ–≤ —Å GitHub: ' + error.message;
    } else if (feedback) {
      feedback.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–æ–≤ —Å GitHub: ' + error.message;
    }
  }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤
function populateLessons() {
  const selectedLevel = levelSelect.value;
  lessonSelect.innerHTML = '';
  const lessons = lessonsData.filter(lesson => lesson.level === selectedLevel);
  console.log('Populating lessons for level:', selectedLevel, 'Found lessons:', lessons);
  if (lessons.length === 0) {
    const option = document.createElement('option');
    option.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤';
    option.disabled = true;
    lessonSelect.appendChild(option);
  } else {
    lessons.forEach(lesson => {
      const option = document.createElement('option');
      option.value = lesson.lesson;
      option.textContent = lesson.name;
      lessonSelect.appendChild(option);
    });
  }
}

loadLessonsFromGitHub();
levelSelect.addEventListener('change', populateLessons);

async function uploadFileToGitHub(file, filePath, token, successMessage) {
  if (!file) {
    adminFeedback.textContent = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è ${filePath}.`;
    return false;
  }

  if (!token) {
    adminFeedback.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ GitHub —Ç–æ–∫–µ–Ω.';
    return false;
  }

  const reader = new FileReader();
  return new Promise((resolve, reject) => {
    reader.onload = async function(e) {
      const fileContent = e.target.result;

      try {
        let sha = null;
        try {
          const existingFileResponse = await fetch(
            `https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/contents/${filePath}`,
            {
              headers: {
                'Authorization': `token ${token}`,
                'Accept': 'application/vnd.github.v3+json'
              }
            }
          );
          if (existingFileResponse.ok) {
            const existingFile = await existingFileResponse.json();
            sha = existingFile.sha;
          }
        } catch (error) {
          // File doesn't exist, proceed with creating a new file
        }

        const content = btoa(unescape(encodeURIComponent(fileContent)));

        const response = await fetch(
          `https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/contents/${filePath}`,
          {
            method: 'PUT',
            headers: {
              'Authorization': `token ${token}`,
              'Accept': 'application/vnd.github.v3+json'
            },
            body: JSON.stringify({
              message: `Update ${filePath}`,
              content: content,
              sha: sha
            })
          }
        );

        if (!response.ok) throw new Error(`GitHub API error: ${response.statusText}`);

        adminFeedback.textContent = successMessage;
        resolve(true);
      } catch (error) {
        adminFeedback.textContent = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${filePath} –Ω–∞ GitHub: ${error.message}`;
        console.error(`Error uploading ${filePath} to GitHub:`, error);
        resolve(false);
      }
    };
    reader.onerror = function() {
      adminFeedback.textContent = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}.`;
      resolve(false);
    };
    reader.readAsText(file);
  });
}

uploadLessonBtn.addEventListener('click', async () => {
  const file = lessonFileInput.files[0];
  const token = githubTokenInput.value.trim();

  if (!file) {
    adminFeedback.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —É—Ä–æ–∫–∞ (.js)';
    return;
  }

  if (!file.name.endsWith('.js')) {
    adminFeedback.textContent = '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .js';
    return;
  }

  const success = await uploadFileToGitHub(
    file,
    `${GITHUB_PATH}/${file.name}`,
    token,
    '–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ.'
  );

  if (success) {
    lessonFileInput.value = '';
    githubTokenInput.value = '';
    await loadLessonsFromGitHub();
  }
});

deleteLessonBtn.addEventListener('click', async () => {
  const lessonFile = deleteLessonSelect.value;
  const token = githubTokenInput.value.trim();

  if (!lessonFile) {
    adminFeedback.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.';
    return;
  }

  if (!token) {
    adminFeedback.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ GitHub —Ç–æ–∫–µ–Ω.';
    return;
  }

  try {
    const fileResponse = await fetch(
      `https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/contents/${GITHUB_PATH}/${lessonFile}`,
      {
        headers: {
          'Authorization': `token ${token}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      }
    );
    if (!fileResponse.ok) throw new Error(`GitHub API error: ${fileResponse.statusText}`);
    const fileData = await fileResponse.json();
    const sha = fileData.sha;

    const deleteResponse = await fetch(
      `https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/contents/${GITHUB_PATH}/${lessonFile}`,
      {
        method: 'DELETE',
        headers: {
          'Authorization': `token ${token}`,
          'Accept': 'application/vnd.github.v3+json'
        },
        body: JSON.stringify({
          message: `Delete lesson ${lessonFile}`,
          sha: sha
        })
      }
    );

    if (!deleteResponse.ok) throw new Error(`GitHub API error: ${deleteResponse.statusText}`);

    adminFeedback.textContent = '–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ GitHub! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.';
    githubTokenInput.value = '';
    await loadLessonsFromGitHub();
  } catch (error) {
    adminFeedback.textContent = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: ${error.message}`;
    console.error('Error deleting lesson from GitHub:', error);
  }
});

uploadIndexHtmlBtn.addEventListener('click', async () => {
  const file = indexHtmlFileInput.files[0];
  const token = githubTokenInput.value.trim();

  const success = await uploadFileToGitHub(
    file,
    'index.html',
    token,
    'index.html —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.'
  );

  if (success) {
    indexHtmlFileInput.value = '';
    githubTokenInput.value = '';
    setTimeout(() => {
      window.location.reload();
    }, 3000);
  }
});

uploadIndexJsBtn.addEventListener('click', async () => {
  const file = indexJsFileInput.files[0];
  const token = githubTokenInput.value.trim();

  const success = await uploadFileToGitHub(
    file,
    'index.js',
    token,
    'index.js —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.'
  );

  if (success) {
    indexJsFileInput.value = '';
    githubTokenInput.value = '';
    setTimeout(() => {
      window.location.reload();
    }, 3000);
  }
});

startBtn.addEventListener('click', () => {
  userName = document.getElementById('name').value.trim();
  userLevel = document.getElementById('level').value;
  userLesson = document.getElementById('lesson').value;
  if (!userName) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.');
    return;
  }

  currentLessonData = lessonsData.find(lesson => lesson.level === userLevel && lesson.lesson === userLesson);
  if (!currentLessonData) {
    alert('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–∫.');
    return;
  }

  progress = {};
  currentLessonData.structures.forEach(struct => {
    progress[struct.id] = 0;
  });

  currentPart = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º introExamples, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (currentLessonData.introExamples && introExamplesDiv) {
    introExamplesDiv.innerHTML = '';
    currentLessonData.introExamples.forEach(example => {
      const p = document.createElement('p');
      p.textContent = example;
      introExamplesDiv.appendChild(p);
    });
  } else if (introExamplesDiv) {
    introExamplesDiv.innerHTML = '<p class="text-sm text-gray-600">–ü—Ä–∏–º–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>';
  }

  startScreen.classList.add('hidden');
  practiceScreen.classList.remove('hidden');
  userNameEl.textContent = userName;
  userLevelEl.textContent = document.getElementById('level').options[document.getElementById('level').selectedIndex].text;
  userLessonEl.textContent = document.getElementById('lesson').options[document.getElementById('lesson').selectedIndex].text;
  initializeProgressBars();
  updateStats();
  feedback.textContent = currentLessonData.parts ? '–°–Ω–∞—á–∞–ª–∞ –≥–æ–≤–æ—Ä–∏ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ß–∞—Å—Ç—å 1)' : '–ì–æ–≤–æ—Ä–∏ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä –Ω–∏–∂–µ.';
});

function goBackToStart() {
  console.log('goBackToStart called');
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  progress = {};
  spokenHistory = [];
  logEntries = [];
  isListening = false;
  lessonCompleted = false;
  startTime = null;
  endTime = null;
  currentLessonData = null;
  currentPart = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
  if (typeof window.usedNames !== 'undefined') {
    window.usedNames.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
    console.log('window.usedNames cleared at goBackToStart:', window.usedNames);
  } else {
    window.usedNames = [];
    console.log('window.usedNames initialized at goBackToStart:', window.usedNames);
  }
  window.lastAskedVerb = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastAskedVerb
  window.lastAskedSubject = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastAskedSubject
  if (recognition) recognition.stop();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –º–µ–Ω—è—Ç—å –∏—Ö –∫–ª–∞—Å—Å—ã
  if (startPracticeBtn) {
    startPracticeBtn.textContent = '–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É';
    startPracticeBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
    startPracticeBtn.classList.add('bg-[#373D8D]', 'hover:bg-[#2A3171]');
    startPracticeBtn.disabled = false;
  }
  if (restartListeningBtn) {
    restartListeningBtn.classList.add('hidden');
  }
  if (completionModal) {
    completionModal.style.display = 'none';
  }
  if (feedback) feedback.textContent = '';
  if (startFeedback) startFeedback.textContent = '';
  if (adminFeedback) adminFeedback.textContent = '';
  if (statsDiv) statsDiv.innerHTML = '';
  if (logDiv) logDiv.innerHTML = '';
  if (modalLog) modalLog.innerHTML = '';
  if (introExamplesDiv) introExamplesDiv.innerHTML = '';
  updateProgressBars();

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
  if (practiceScreen) practiceScreen.classList.add('hidden');
  if (adminScreen) adminScreen.classList.add('hidden');
  if (startScreen) startScreen.classList.remove('hidden');
}

startPracticeBtn.addEventListener('click', () => {
  feedback.textContent = '–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É...';
  if (!isListening) {
    startTime = new Date();
    startListening();
  } else {
    feedback.textContent = '–ü—Ä–∞–∫—Ç–∏–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.';
  }
});

restartListeningBtn.addEventListener('click', () => {
  feedback.textContent = '–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...';
  if (!isListening) {
    startListening();
  } else {
    feedback.textContent = '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.';
  }
});

function startNewTraining() {
  goBackToStart();
}

function startListening() {
  if (!recognition) {
    feedback.textContent = 'SpeechRecognition –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.';
    return;
  }

  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º window.usedNames –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (typeof window.usedNames !== 'undefined') {
      window.usedNames.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
      console.log('window.usedNames cleared at startListening:', window.usedNames);
    } else {
      window.usedNames = [];
      console.log('window.usedNames initialized at startListening:', window.usedNames);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ usedNames –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
    if (currentLessonData) {
      currentLessonData.usedNames = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
      console.log('currentLessonData.usedNames reset at startListening:', currentLessonData.usedNames);
    }

    recognition.start();
    isListening = true;
    if (startPracticeBtn) {
      startPracticeBtn.textContent = '–°–ª—É—à–∞—é...';
      startPracticeBtn.classList.remove('bg-[#373D8D]', 'hover:bg-[#2A3171]');
      startPracticeBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
      startPracticeBtn.disabled = true;
    }
    if (restartListeningBtn) {
      restartListeningBtn.classList.add('hidden');
    }
    feedback.textContent = currentLessonData.parts ? (currentPart === 1 ? '–°–Ω–∞—á–∞–ª–∞ –≥–æ–≤–æ—Ä–∏ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ß–∞—Å—Ç—å 1)' : '–¢–µ–ø–µ—Ä—å –≥–æ–≤–æ—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ß–∞—Å—Ç—å 2)') : '–ì–æ–≤–æ—Ä–∏ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä –Ω–∏–∂–µ.';
    lastSpeechTime = Date.now();
  } catch (error) {
    feedback.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: ' + error.message + '. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    isListening = false;
    if (startPracticeBtn) {
      startPracticeBtn.textContent = '–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É';
      startPracticeBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
      startPracticeBtn.classList.add('bg-[#373D8D]', 'hover:bg-[#2A3171]');
      startPracticeBtn.disabled = false;
    }
    if (restartListeningBtn) {
      restartListeningBtn.classList.remove('hidden');
    }
  }
}

function initializeProgressBars() {
  updateProgressBars();
}

function formatDuration(start, end) {
  if (!start || !end) return '0 –º–∏–Ω—É—Ç 0 —Å–µ–∫—É–Ω–¥';
  const durationMs = end - start;
  const minutes = Math.floor(durationMs / 1000 / 60);
  const seconds = Math.floor((durationMs / 1000) % 60);
  return `${minutes} –º–∏–Ω—É—Ç ${seconds} —Å–µ–∫—É–Ω–¥`;
}

function updateStats() {
  if (!currentLessonData) return;
  const requiredExamples = currentLessonData.requiredCorrect * currentLessonData.structures.length;
  const totalCorrect = Object.values(progress).reduce((sum, count) => sum + count, 0);
  const totalAttempts = logEntries.length;
  const accuracy = totalAttempts > 0 ? ((totalCorrect / totalAttempts) * 100).toFixed(2) : 0;

  let statsHTML = `
    <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong></p>
    <p>- –ù—É–∂–Ω–æ –±—ã–ª–æ —Å–∫–∞–∑–∞—Ç—å: ${requiredExamples} –ø—Ä–∏–º–µ—Ä–æ–≤</p>
    <p>- –°–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${totalCorrect} –ø—Ä–∏–º–µ—Ä–æ–≤</p>
    <p>- –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${totalAttempts}</p>
    <p>- –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏: ${accuracy}%</p>
  `;
  
  if (lessonCompleted && startTime && endTime) {
    statsHTML += `<p>- –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${formatDuration(startTime, endTime)}</p>`;
  }

  statsDiv.innerHTML = statsHTML;
}

function updateModalLog() {
  if (!currentLessonData) return;
  const requiredExamples = currentLessonData.requiredCorrect * currentLessonData.structures.length;
  const totalCorrect = Object.values(progress).reduce((sum, count) => sum + count, 0);
  const totalAttempts = logEntries.length;
  const accuracy = totalAttempts > 0 ? ((totalCorrect / totalAttempts) * 100).toFixed(2) : 0;
  const duration = formatDuration(startTime, endTime);

  let logHTML = `
    <p><strong>–ü—Ä–æ—Ç–æ–∫–æ–ª:</strong></p>
    <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong></p>
    <p>- –ù—É–∂–Ω–æ –±—ã–ª–æ —Å–∫–∞–∑–∞—Ç—å: ${requiredExamples} –ø—Ä–∏–º–µ—Ä–æ–≤</p>
    <p>- –°–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${totalCorrect} –ø—Ä–∏–º–µ—Ä–æ–≤</p>
    <p>- –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${totalAttempts}</p>
    <p>- –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏: ${accuracy}%</p>
    <p>- –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${duration}</p>
    <p><strong>–ü–æ–ø—ã—Ç–∫–∏:</strong></p>
  `;

  logEntries.forEach(entry => {
    if (entry.exceeded) {
      logHTML += `<p>[${entry.time}] ${entry.spoken} üéâüéà‚ù§Ô∏è</p>`;
    } else {
      const statusIcon = entry.correct ? '‚úÖ' : '‚ùå';
      const duplicateIcon = entry.duplicate ? 'üîÅ' : '';
      logHTML += `<p>[${entry.time}] –°–∫–∞–∑–∞–Ω–æ: "${entry.spoken}"${entry.structure ? ` –¥–ª—è "${entry.structure}"` : ''} - ${statusIcon} ${entry.correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}${duplicateIcon ? ` ${duplicateIcon} –ü–æ–≤—Ç–æ—Ä` : ''}</p>`;
    }
  });

  modalLog.innerHTML = logHTML;
}

if (recognition) {
  recognition.onresult = (event) => {
    const spokenText = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
    const matchedStructure = findMatchingStructure(spokenText);
    const logEntry = { time: new Date().toLocaleTimeString(), spoken: spokenText };

    lastSpeechTime = Date.now();

    console.log('Current window.usedNames before validation:', window.usedNames);
    console.log('Current lesson usedNames before validation:', currentLessonData ? currentLessonData.usedNames : 'No lesson data');

    if (matchedStructure) {
      let isCorrect;
      if (matchedStructure.id === "answer") {
        // –í—ã–∑—ã–≤–∞–µ–º validateStructure —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        isCorrect = currentLessonData.validateStructure.call(currentLessonData, spokenText);
      } else {
        // –í—ã–∑—ã–≤–∞–µ–º validateStructure —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        isCorrect = currentLessonData.validateStructure.call(currentLessonData, spokenText, matchedStructure);
      }
      if (isCorrect) {
        const isDuplicate = matchedStructure.hasName && spokenHistory.includes(spokenText);
        logEntry.structure = matchedStructure.structure;
        logEntry.correct = true;
        logEntry.duplicate = isDuplicate;

        if (!isDuplicate || !matchedStructure.hasName) {
          progress[matchedStructure.id]++;
          if (matchedStructure.hasName) spokenHistory.push(spokenText);

          if (progress[matchedStructure.id] > currentLessonData.requiredCorrect) {
            feedback.textContent = `–û—Ç–ª–∏—á–Ω–æ! üéâüéà‚ù§Ô∏è –¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª —Ü–µ–ª—å –¥–ª—è "${matchedStructure.structure}"!`;
            logEntries.push({
              time: new Date().toLocaleTimeString(),
              spoken: `–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Ü–µ–ª—å –¥–ª—è "${matchedStructure.structure}"`,
              structure: matchedStructure.structure,
              correct: true,
              exceeded: true
            });
          } else {
            feedback.textContent = `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã —Å–∫–∞–∑–∞–ª: "${spokenText}" –¥–ª—è "${matchedStructure.structure}"`;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
          checkPartProgress();

          updateProgressBars();
          checkCompletion();
        } else {
          feedback.textContent = `–ü–æ–≤—Ç–æ—Ä: "${spokenText}". –°–∫–∞–∂–∏ –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è: ${matchedStructure.structure}`;
        }
      } else {
        logEntry.structure = matchedStructure.structure;
        logEntry.correct = false;
        feedback.textContent = `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: "${spokenText}" –¥–ª—è "${matchedStructure.structure}"`;
      }
    } else {
      logEntry.correct = false;
      feedback.textContent = `–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "${spokenText}". ${currentLessonData.parts ? (currentPart === 1 ? '–°–Ω–∞—á–∞–ª–∞ –≥–æ–≤–æ—Ä–∏ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ß–∞—Å—Ç—å 1)' : '–¢–µ–ø–µ—Ä—å –≥–æ–≤–æ—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ß–∞—Å—Ç—å 2)') : '–ü–æ–ø—Ä–æ–±—É–π –æ–¥–Ω—É –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä –Ω–∏–∂–µ.'}`;
    }

    logEntries.push(logEntry);
    updateLog();
    updateStats();

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å recognition, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ
    setTimeout(() => {
      if (isListening && !recognition.recognizing && completionModal.style.display !== 'block') {
        try {
          recognition.start();
        } catch (error) {
          console.error('Failed to restart recognition:', error);
        }
      }
    }, 500);
  };

  recognition.onerror = (event) => {
    feedback.textContent = '–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: ' + event.error + '. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.';
    isListening = false;
    if (startPracticeBtn) {
      startPracticeBtn.textContent = '–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É';
      startPracticeBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
      startPracticeBtn.classList.add('bg-[#373D8D]', 'hover:bg-[#2A3171]');
      startPracticeBtn.disabled = false;
    }
    if (restartListeningBtn) {
      restartListeningBtn.classList.remove('hidden');
    }
  };

  recognition.onend = () => {
    recognition.recognizing = false;
    const currentTime = Date.now();
    if (currentTime - lastSpeechTime > 10000) {
      feedback.textContent = '–î–∞–≤–Ω–æ –Ω–µ —Å–ª—ã—à—É —Ä–µ—á–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...';
      isListening = false;
      if (startPracticeBtn) {
        startPracticeBtn.textContent = '–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É';
        startPracticeBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
        startPracticeBtn.classList.add('bg-[#373D8D]', 'hover:bg-[#2A3171]');
        startPracticeBtn.disabled = false;
      }
      if (restartListeningBtn) {
        restartListeningBtn.classList.remove('hidden');
      }
      return;
    }

    if (isListening && completionModal.style.display !== 'block') {
      setTimeout(() => {
        if (!recognition.recognizing) {
          try {
            recognition.start();
          } catch (error) {
            feedback.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ' + error.message + '. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            isListening = false;
            if (startPracticeBtn) {
              startPracticeBtn.textContent = '–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É';
              startPracticeBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
              startPracticeBtn.classList.add('bg-[#373D8D]', 'hover:bg-[#2A3171]');
              startPracticeBtn.disabled = false;
            }
            if (restartListeningBtn) {
              restartListeningBtn.classList.remove('hidden');
            }
          }
        }
      }, 500);
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ recognizing –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  Object.defineProperty(recognition, 'recognizing', {
    get: function() {
      return this._recognizing || false;
    },
    set: function(value) {
      this._recognizing = value;
    }
  });

  recognition.onstart = () => {
    recognition.recognizing = true;
  };
}

function findMatchingStructure(text) {
  if (!currentLessonData) return null;
  const structures = currentLessonData.structures;

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
  const activeStructures = structures.filter(struct => {
    if (!currentLessonData.parts) return true; // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    return currentLessonData.parts[struct.id] === currentPart;
  });

  for (let struct of activeStructures) {
    // –í—ã–∑—ã–≤–∞–µ–º validateStructure —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    if (currentLessonData.validateStructure.call(currentLessonData, text, struct)) {
      console.log(`Checking specific structure: "${struct.structure}" for text: "${text}"`);
      console.log('Matched specific structure:', struct.structure);
      return struct;
    }
  }
  for (let struct of activeStructures) {
    console.log(`Checking general structure: "${struct.structure}" for text: "${text}"`);
    // –í—ã–∑—ã–≤–∞–µ–º validateStructure —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    if (currentLessonData.validateStructure.call(currentLessonData, text, struct)) {
      console.log('Matched general structure:', struct.structure);
      return struct;
    }
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å (Yes/No), —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
  if (currentPart === 2 || !currentLessonData.parts) {
    console.log(`Checking answer for last verb: "${window.lastAskedVerb}" and subject: "${window.lastAskedSubject}"`);
    if (window.lastAskedVerb && window.lastAskedSubject) {
      const words = text.split(' ').filter(word => word.length > 0);
      const normalizedWords = words.map(word => word.toLowerCase());
      if (normalizedWords[0] === "yes" || normalizedWords[0] === "no") {
        // –í—ã–∑—ã–≤–∞–µ–º validateStructure —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if (currentLessonData.validateStructure.call(currentLessonData, text)) {
          console.log('Matched answer structure');
          return { structure: `Answer to "${window.lastAskedSubject} ${window.lastAskedVerb}"`, id: "answer" };
        }
      }
    }
  }
  console.log(`No matching structure found for text: "${text}"`);
  return null;
}

function checkPartProgress() {
  if (!currentLessonData || !currentLessonData.parts || currentPart !== 1) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
  const part1Structures = currentLessonData.structures.filter(struct => currentLessonData.parts[struct.id] === 1);
  const requiredPerStructure = currentLessonData.requiredCorrect; // 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  const part1Completed = part1Structures.every(struct => {
    const count = progress[struct.id];
    const meetsRequirement = count >= requiredPerStructure;
    console.log(`Structure "${struct.structure}" has ${count} correct answers, needs ${requiredPerStructure}: ${meetsRequirement}`);
    return meetsRequirement;
  });

  if (part1Completed) {
    currentPart = 2;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ usedNames –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
    if (currentLessonData) {
      currentLessonData.usedNames = [];
      console.log('currentLessonData.usedNames reset at part transition:', currentLessonData.usedNames);
    }
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º window.usedNames –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —É—Ä–æ–∫–∞–º–∏
    if (typeof window.usedNames !== 'undefined') {
      window.usedNames.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
      console.log('window.usedNames cleared at part transition:', window.usedNames);
    } else {
      window.usedNames = [];
      console.log('window.usedNames initialized at part transition:', window.usedNames);
    }
    feedback.textContent = '–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –ß–∞—Å—Ç—å 1 (—É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ß–∞—Å—Ç—å 2: –≥–æ–≤–æ—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.';
    updateProgressBars();
  }
}

function updateLog() {
  logDiv.innerHTML = '';
  logEntries.forEach(entry => {
    const p = document.createElement('p');
    p.className = 'mb-1';
    if (entry.exceeded) {
      p.textContent = `[${entry.time}] ${entry.spoken} üéâüéà‚ù§Ô∏è`;
    } else {
      const statusIcon = entry.correct ? '‚úÖ' : '‚ùå';
      const duplicateIcon = entry.duplicate ? 'üîÅ' : '';
      p.textContent = `[${entry.time}] –°–∫–∞–∑–∞–Ω–æ: "${entry.spoken}"${entry.structure ? ` –¥–ª—è "${entry.structure}"` : ''} - ${statusIcon} ${entry.correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}${duplicateIcon ? ` ${duplicateIcon} –ü–æ–≤—Ç–æ—Ä` : ''}`;
    }
    logDiv.appendChild(p);
  });
  logDiv.scrollTop = logDiv.scrollHeight;
}

function updateProgressBars() {
  if (!currentLessonData) return;
  
  // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ requiredCorrect –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
  const totalRequired = currentLessonData.requiredCorrect * currentLessonData.structures.length;
  const totalCompleted = Object.values(progress).reduce((sum, count) => sum + Math.min(count, currentLessonData.requiredCorrect), 0);
  const totalPercentage = totalRequired > 0 ? (totalCompleted / totalRequired) * 100 : 0;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  totalProgressText.textContent = `${totalCompleted}/${totalRequired}`;
  totalProgressBar.style.width = `${totalPercentage}%`;

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  progressBars.innerHTML = '';
  
  // –ï—Å–ª–∏ —É—Ä–æ–∫ —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ —á–∞—Å—Ç–∏, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ —á–∞—Å—Ç—è–º
  if (currentLessonData.parts) {
    const parts = [...new Set(Object.values(currentLessonData.parts))].sort();
    parts.forEach(part => {
      const partStructures = currentLessonData.structures.filter(struct => currentLessonData.parts[struct.id] === part);
      const partDiv = document.createElement('div');
      partDiv.className = 'mb-4';

      const partHeader = document.createElement('p');
      partHeader.className = 'text-md font-semibold mb-2';
      partHeader.textContent = `–ß–∞—Å—Ç—å ${part}: ${part === 1 ? '–£—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' : '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'}`;
      partDiv.appendChild(partHeader);

      partStructures.forEach(struct => {
        const totalCorrect = progress[struct.id];
        const structDiv = document.createElement('div');
        structDiv.className = 'mb-2';

        let barsHTML = `
          <p class="text-sm">${struct.structure}</p>
        `;

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        if (struct.translations) {
          barsHTML += `
            <p class="text-xs text-gray-600 mb-1">${struct.translations.join(' / ')}</p>
          `;
        } else if (struct.translation) {
          barsHTML += `
            <p class="text-xs text-gray-600 mb-1">${struct.translation}</p>
          `;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (struct.examples && struct.examples.length > 0) {
          barsHTML += `
            <p class="text-xs text-gray-600 mb-1">–ü—Ä–∏–º–µ—Ä—ã: ${struct.examples.join(' / ')}</p>
          `;
        }

        const firstBarProgress = Math.min(totalCorrect, currentLessonData.requiredCorrect);
        const firstBarPercentage = (firstBarProgress / currentLessonData.requiredCorrect) * 100;
        barsHTML += `
          <div class="w-full bg-gray-200 rounded-full h-2.5 mb-1">
            <div class="bg-[#373D8D] h-2.5 rounded-full" style="width: ${firstBarPercentage}%"></div>
          </div>
        `;

        if (totalCorrect > currentLessonData.requiredCorrect) {
          const excessCorrect = totalCorrect - currentLessonData.requiredCorrect;
          const excessProgress = excessCorrect % currentLessonData.requiredCorrect;
          const excessPercentage = (excessProgress / currentLessonData.requiredCorrect) * 100;
          barsHTML += `
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-[#28A745] h-2.5 rounded-full" style="width: ${excessPercentage}%"></div>
            </div>
          `;
        }

        barsHTML += `
          <p class="text-xs text-gray-600">${totalCorrect}/${currentLessonData.requiredCorrect}</p>
        `;
        structDiv.innerHTML = barsHTML;
        partDiv.appendChild(structDiv);
        console.log(`Rendering progress bar for structure: "${struct.structure}" in Part ${part}`);
      });

      progressBars.appendChild(partDiv);
    });
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    currentLessonData.structures.forEach(struct => {
      const totalCorrect = progress[struct.id];
      const div = document.createElement('div');
      div.className = 'mb-2';

      let barsHTML = `
        <p class="text-sm">${struct.structure}</p>
      `;

      if (struct.translations) {
        barsHTML += `
          <p class="text-xs text-gray-600 mb-1">${struct.translations.join(' / ')}</p>
        `;
      } else if (struct.translation) {
        barsHTML += `
          <p class="text-xs text-gray-600 mb-1">${struct.translation}</p>
        `;
      }

      if (struct.examples && struct.examples.length > 0) {
        barsHTML += `
          <p class="text-xs text-gray-600 mb-1">–ü—Ä–∏–º–µ—Ä—ã: ${struct.examples.join(' / ')}</p>
        `;
      }

      const firstBarProgress = Math.min(totalCorrect, currentLessonData.requiredCorrect);
      const firstBarPercentage = (firstBarProgress / currentLessonData.requiredCorrect) * 100;
      barsHTML += `
        <div class="w-full bg-gray-200 rounded-full h-2.5 mb-1">
          <div class="bg-[#373D8D] h-2.5 rounded-full" style="width: ${firstBarPercentage}%"></div>
        </div>
      `;

      if (totalCorrect > currentLessonData.requiredCorrect) {
        const excessCorrect = totalCorrect - currentLessonData.requiredCorrect;
        const excessProgress = excessCorrect % currentLessonData.requiredCorrect;
        const excessPercentage = (excessProgress / currentLessonData.requiredCorrect) * 100;
        barsHTML += `
          <div class="w-full bg-gray-200 rounded-full h-2.5">
            <div class="bg-[#28A745] h-2.5 rounded-full" style="width: ${excessPercentage}%"></div>
          </div>
        `;
      }

      barsHTML += `
        <p class="text-xs text-gray-600">${totalCorrect}/${currentLessonData.requiredCorrect}</p>
      `;
      div.innerHTML = barsHTML;
      progressBars.appendChild(div);
      console.log(`Rendering progress bar for structure: "${struct.structure}"`);
    });
  }
}

function checkCompletion() {
  if (!currentLessonData) return;
  if (Object.values(progress).every(count => count >= currentLessonData.requiredCorrect)) {
    endTime = new Date();
    lessonCompleted = true;
    const randomMessage = encouragementMessages[Math.floor(Math.random() * encouragementMessages.length)];
    congratulationsEl.textContent = randomMessage;
    updateModalLog();
    completionModal.style.display = 'block';
    isListening = false;
    if (recognition) recognition.stop();
    startPracticeBtn.textContent = '–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω';
    updateStats();
    sendResults();
  }
}

async function sendResults() {
  if (!currentLessonData) return;
  const requiredExamples = currentLessonData.requiredCorrect * currentLessonData.structures.length;
  const totalCorrect = Object.values(progress).reduce((sum, count) => sum + count, 0);
  const totalAttempts = logEntries.length;
  const accuracy = totalAttempts > 0 ? ((totalCorrect / totalAttempts) * 100).toFixed(2) : 0;
  const duration = formatDuration(startTime, endTime);

  const resultSummary = `
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${userName}
–£—Ä–æ–≤–µ–Ω—å: ${userLevelEl.textContent}
–£—Ä–æ–∫: ${userLessonEl.textContent}
–ü—Ä–æ–≥—Ä–µ—Å—Å: ${Object.entries(progress).map(([id, count]) => `${currentLessonData.structures.find(s => s.id === id).structure}: ${count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö`).join('\n')}
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ù—É–∂–Ω–æ –±—ã–ª–æ —Å–∫–∞–∑–∞—Ç—å: ${requiredExamples} –ø—Ä–∏–º–µ—Ä–æ–≤
- –°–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${totalCorrect} –ø—Ä–∏–º–µ—Ä–æ–≤
- –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${totalAttempts}
- –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏: ${accuracy}%
- –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${duration}
–ü—Ä–æ—Ç–æ–∫–æ–ª:
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ:
- –ù—É–∂–Ω–æ –±—ã–ª–æ —Å–∫–∞–∑–∞—Ç—å: ${requiredExamples} –ø—Ä–∏–º–µ—Ä–æ–≤
- –°–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${totalCorrect} –ø—Ä–∏–º–µ—Ä–æ–≤
- –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${totalAttempts}
- –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏: ${accuracy}%
- –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${duration}
${logEntries.map(entry => {
  if (entry.exceeded) {
    return `- ${entry.spoken} üéâüéà‚ù§Ô∏è`;
  } else {
    const statusIcon = entry.correct ? '‚úÖ' : '‚ùå';
    const duplicateIcon = entry.duplicate ? 'üîÅ' : '';
    return `- ${entry.spoken}${entry.structure ? ` (–¥–ª—è "${entry.structure}")` : ''} - ${statusIcon} ${entry.correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}${duplicateIcon ? ` ${duplicateIcon} –ü–æ–≤—Ç–æ—Ä` : ''}`;
  }
}).join('\n')}
`;

  const TELEGRAM_BOT_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN';
  const TELEGRAM_CHAT_ID = 'YOUR_TELEGRAM_CHAT_ID';
  const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  try {
    await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: resultSummary
      })
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
  }

  const BITRIX_WEBHOOK_URL = 'https://elcalmaty.bitrix24.kz/rest/1/t30j7bkqi9p4sy0b/';
  const BITRIX_CHAT_ID = '145630';
  const bitrixUrl = `${BITRIX_WEBHOOK_URL}im.message.add`;

  try {
    const response = await fetch(bitrixUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        CHAT_ID: BITRIX_CHAT_ID,
        MESSAGE: resultSummary
      })
    });
    const data = await response.json();
    if (!data.result) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Bitrix24:', JSON.stringify(data.error));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Bitrix24:', error.message);
  }
}
